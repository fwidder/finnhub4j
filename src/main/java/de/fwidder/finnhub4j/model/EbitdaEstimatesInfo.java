/*
 * Finnhub API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.fwidder.finnhub4j.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.time.LocalDate;
import java.util.Objects;

/**
 * EbitdaEstimatesInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-09T22:29:37.142+01:00")
public class EbitdaEstimatesInfo {
    @JsonProperty("ebitdaAvg")
    private Float ebitdaAvg = null;

    @JsonProperty("ebitdaHigh")
    private Float ebitdaHigh = null;

    @JsonProperty("ebitdaLow")
    private Float ebitdaLow = null;

    @JsonProperty("numberAnalysts")
    private Long numberAnalysts = null;

    @JsonProperty("period")
    private LocalDate period = null;

    @JsonProperty("year")
    private Long year = null;

    @JsonProperty("quarter")
    private Long quarter = null;

    public EbitdaEstimatesInfo ebitdaAvg(Float ebitdaAvg) {
        this.ebitdaAvg = ebitdaAvg;
        return this;
    }

    /**
     * Average EBITDA estimates including Finnhub&#39;s proprietary estimates.
     *
     * @return ebitdaAvg
     **/
    @ApiModelProperty(value = "Average EBITDA estimates including Finnhub's proprietary estimates.")
    public Float getEbitdaAvg() {
        return ebitdaAvg;
    }

    public void setEbitdaAvg(Float ebitdaAvg) {
        this.ebitdaAvg = ebitdaAvg;
    }

    public EbitdaEstimatesInfo ebitdaHigh(Float ebitdaHigh) {
        this.ebitdaHigh = ebitdaHigh;
        return this;
    }

    /**
     * Highest estimate.
     *
     * @return ebitdaHigh
     **/
    @ApiModelProperty(value = "Highest estimate.")
    public Float getEbitdaHigh() {
        return ebitdaHigh;
    }

    public void setEbitdaHigh(Float ebitdaHigh) {
        this.ebitdaHigh = ebitdaHigh;
    }

    public EbitdaEstimatesInfo ebitdaLow(Float ebitdaLow) {
        this.ebitdaLow = ebitdaLow;
        return this;
    }

    /**
     * Lowest estimate.
     *
     * @return ebitdaLow
     **/
    @ApiModelProperty(value = "Lowest estimate.")
    public Float getEbitdaLow() {
        return ebitdaLow;
    }

    public void setEbitdaLow(Float ebitdaLow) {
        this.ebitdaLow = ebitdaLow;
    }

    public EbitdaEstimatesInfo numberAnalysts(Long numberAnalysts) {
        this.numberAnalysts = numberAnalysts;
        return this;
    }

    /**
     * Number of Analysts.
     *
     * @return numberAnalysts
     **/
    @ApiModelProperty(value = "Number of Analysts.")
    public Long getNumberAnalysts() {
        return numberAnalysts;
    }

    public void setNumberAnalysts(Long numberAnalysts) {
        this.numberAnalysts = numberAnalysts;
    }

    public EbitdaEstimatesInfo period(LocalDate period) {
        this.period = period;
        return this;
    }

    /**
     * Period.
     *
     * @return period
     **/
    @ApiModelProperty(value = "Period.")
    public LocalDate getPeriod() {
        return period;
    }

    public void setPeriod(LocalDate period) {
        this.period = period;
    }

    public EbitdaEstimatesInfo year(Long year) {
        this.year = year;
        return this;
    }

    /**
     * Fiscal year.
     *
     * @return year
     **/
    @ApiModelProperty(value = "Fiscal year.")
    public Long getYear() {
        return year;
    }

    public void setYear(Long year) {
        this.year = year;
    }

    public EbitdaEstimatesInfo quarter(Long quarter) {
        this.quarter = quarter;
        return this;
    }

    /**
     * Fiscal quarter.
     *
     * @return quarter
     **/
    @ApiModelProperty(value = "Fiscal quarter.")
    public Long getQuarter() {
        return quarter;
    }

    public void setQuarter(Long quarter) {
        this.quarter = quarter;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EbitdaEstimatesInfo ebitdaEstimatesInfo = (EbitdaEstimatesInfo) o;
        return Objects.equals(this.ebitdaAvg, ebitdaEstimatesInfo.ebitdaAvg) &&
                Objects.equals(this.ebitdaHigh, ebitdaEstimatesInfo.ebitdaHigh) &&
                Objects.equals(this.ebitdaLow, ebitdaEstimatesInfo.ebitdaLow) &&
                Objects.equals(this.numberAnalysts, ebitdaEstimatesInfo.numberAnalysts) &&
                Objects.equals(this.period, ebitdaEstimatesInfo.period) &&
                Objects.equals(this.year, ebitdaEstimatesInfo.year) &&
                Objects.equals(this.quarter, ebitdaEstimatesInfo.quarter);
    }

    @Override
    public int hashCode() {
        return Objects.hash(ebitdaAvg, ebitdaHigh, ebitdaLow, numberAnalysts, period, year, quarter);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EbitdaEstimatesInfo {\n");

        sb.append("    ebitdaAvg: ").append(toIndentedString(ebitdaAvg)).append("\n");
        sb.append("    ebitdaHigh: ").append(toIndentedString(ebitdaHigh)).append("\n");
        sb.append("    ebitdaLow: ").append(toIndentedString(ebitdaLow)).append("\n");
        sb.append("    numberAnalysts: ").append(toIndentedString(numberAnalysts)).append("\n");
        sb.append("    period: ").append(toIndentedString(period)).append("\n");
        sb.append("    year: ").append(toIndentedString(year)).append("\n");
        sb.append("    quarter: ").append(toIndentedString(quarter)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

