/*
 * Finnhub API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.fwidder.finnhub4j.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * PatternRecognition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-09T22:29:37.142+01:00")
public class PatternRecognition {
    @JsonProperty("points")
    private List<ScanPattern> points = null;

    public PatternRecognition points(List<ScanPattern> points) {
        this.points = points;
        return this;
    }

    public PatternRecognition addPointsItem(ScanPattern pointsItem) {
        if (this.points == null) {
            this.points = new ArrayList<>();
        }
        this.points.add(pointsItem);
        return this;
    }

    /**
     * Array of patterns.
     *
     * @return points
     **/
    @ApiModelProperty(value = "Array of patterns.")
    public List<ScanPattern> getPoints() {
        return points;
    }

    public void setPoints(List<ScanPattern> points) {
        this.points = points;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PatternRecognition patternRecognition = (PatternRecognition) o;
        return Objects.equals(this.points, patternRecognition.points);
    }

    @Override
    public int hashCode() {
        return Objects.hash(points);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PatternRecognition {\n");

        sb.append("    points: ").append(toIndentedString(points)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

