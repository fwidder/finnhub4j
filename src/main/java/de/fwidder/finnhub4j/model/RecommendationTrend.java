/*
 * Finnhub API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.fwidder.finnhub4j.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * RecommendationTrend
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-02-09T22:29:37.142+01:00")
public class RecommendationTrend {
    @JsonProperty("symbol")
    private String symbol = null;

    @JsonProperty("buy")
    private Long buy = null;

    @JsonProperty("hold")
    private Long hold = null;

    @JsonProperty("period")
    private String period = null;

    @JsonProperty("sell")
    private Long sell = null;

    @JsonProperty("strongBuy")
    private Long strongBuy = null;

    @JsonProperty("strongSell")
    private Long strongSell = null;

    public RecommendationTrend symbol(String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Company symbol.
     *
     * @return symbol
     **/
    @ApiModelProperty(value = "Company symbol.")
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    public RecommendationTrend buy(Long buy) {
        this.buy = buy;
        return this;
    }

    /**
     * Number of recommendations that fall into the Buy category
     *
     * @return buy
     **/
    @ApiModelProperty(value = "Number of recommendations that fall into the Buy category")
    public Long getBuy() {
        return buy;
    }

    public void setBuy(Long buy) {
        this.buy = buy;
    }

    public RecommendationTrend hold(Long hold) {
        this.hold = hold;
        return this;
    }

    /**
     * Number of recommendations that fall into the Hold category
     *
     * @return hold
     **/
    @ApiModelProperty(value = "Number of recommendations that fall into the Hold category")
    public Long getHold() {
        return hold;
    }

    public void setHold(Long hold) {
        this.hold = hold;
    }

    public RecommendationTrend period(String period) {
        this.period = period;
        return this;
    }

    /**
     * Updated period
     *
     * @return period
     **/
    @ApiModelProperty(value = "Updated period")
    public String getPeriod() {
        return period;
    }

    public void setPeriod(String period) {
        this.period = period;
    }

    public RecommendationTrend sell(Long sell) {
        this.sell = sell;
        return this;
    }

    /**
     * Number of recommendations that fall into the Sell category
     *
     * @return sell
     **/
    @ApiModelProperty(value = "Number of recommendations that fall into the Sell category")
    public Long getSell() {
        return sell;
    }

    public void setSell(Long sell) {
        this.sell = sell;
    }

    public RecommendationTrend strongBuy(Long strongBuy) {
        this.strongBuy = strongBuy;
        return this;
    }

    /**
     * Number of recommendations that fall into the Strong Buy category
     *
     * @return strongBuy
     **/
    @ApiModelProperty(value = "Number of recommendations that fall into the Strong Buy category")
    public Long getStrongBuy() {
        return strongBuy;
    }

    public void setStrongBuy(Long strongBuy) {
        this.strongBuy = strongBuy;
    }

    public RecommendationTrend strongSell(Long strongSell) {
        this.strongSell = strongSell;
        return this;
    }

    /**
     * Number of recommendations that fall into the Strong Sell category
     *
     * @return strongSell
     **/
    @ApiModelProperty(value = "Number of recommendations that fall into the Strong Sell category")
    public Long getStrongSell() {
        return strongSell;
    }

    public void setStrongSell(Long strongSell) {
        this.strongSell = strongSell;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RecommendationTrend recommendationTrend = (RecommendationTrend) o;
        return Objects.equals(this.symbol, recommendationTrend.symbol) &&
                Objects.equals(this.buy, recommendationTrend.buy) &&
                Objects.equals(this.hold, recommendationTrend.hold) &&
                Objects.equals(this.period, recommendationTrend.period) &&
                Objects.equals(this.sell, recommendationTrend.sell) &&
                Objects.equals(this.strongBuy, recommendationTrend.strongBuy) &&
                Objects.equals(this.strongSell, recommendationTrend.strongSell);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, buy, hold, period, sell, strongBuy, strongSell);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RecommendationTrend {\n");

        sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
        sb.append("    hold: ").append(toIndentedString(hold)).append("\n");
        sb.append("    period: ").append(toIndentedString(period)).append("\n");
        sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
        sb.append("    strongBuy: ").append(toIndentedString(strongBuy)).append("\n");
        sb.append("    strongSell: ").append(toIndentedString(strongSell)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

